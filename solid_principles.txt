SOLID

1.Single-responsibility principle (SRP) ---> A class should have only one reason to change.
    This means that a class should have only one responsibility, as expressed through its methods.
    If a class takes care of more than one task, then you should separate those tasks into separate classes.

2.Openâ€“closed principle (OCP) --> Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.

3.Liskov substitution principle (LSP) --> Subtypes must be substitutable for their base types.
    For example, if you have a piece of code that works with a Shape class, then you should be able to
    substitute that class with any of its subclasses, such as Circle or Rectangle, without breaking the code.

4.Interface segregation principle (ISP) --> Clients should not be forced to depend upon methods that they do not use. Interfaces belong to clients, not to hierarchies.

5.Dependency inversion principle (DIP) --> Abstractions should not depend upon details. Details should depend upon abstractions.